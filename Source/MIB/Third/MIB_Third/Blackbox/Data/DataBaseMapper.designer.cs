#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Blackbox.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MIB")]
	public partial class DataBaseMapperDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertSubscription(Subscription instance);
    partial void UpdateSubscription(Subscription instance);
    partial void DeleteSubscription(Subscription instance);
    partial void InsertEvent_Subscription(Event_Subscription instance);
    partial void UpdateEvent_Subscription(Event_Subscription instance);
    partial void DeleteEvent_Subscription(Event_Subscription instance);
    #endregion
		
		public DataBaseMapperDataContext() : 
				base(global::Blackbox.Properties.Settings.Default.MIBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseMapperDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseMapperDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseMapperDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseMapperDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Subscription> Subscriptions
		{
			get
			{
				return this.GetTable<Subscription>();
			}
		}
		
		public System.Data.Linq.Table<Event_Subscription> Event_Subscriptions
		{
			get
			{
				return this.GetTable<Event_Subscription>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventHash;
		
		private System.Data.Linq.Binary _EventData;
		
		private EntitySet<Event_Subscription> _Event_Subscriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventHashChanging(int value);
    partial void OnEventHashChanged();
    partial void OnEventDataChanging(System.Data.Linq.Binary value);
    partial void OnEventDataChanged();
    #endregion
		
		public Event()
		{
			this._Event_Subscriptions = new EntitySet<Event_Subscription>(new Action<Event_Subscription>(this.attach_Event_Subscriptions), new Action<Event_Subscription>(this.detach_Event_Subscriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventHash", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EventHash
		{
			get
			{
				return this._EventHash;
			}
			set
			{
				if ((this._EventHash != value))
				{
					this.OnEventHashChanging(value);
					this.SendPropertyChanging();
					this._EventHash = value;
					this.SendPropertyChanged("EventHash");
					this.OnEventHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Event", Storage="_EventData", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary EventData
		{
			get
			{
				return this._EventData;
			}
			set
			{
				if ((this._EventData != value))
				{
					this.OnEventDataChanging(value);
					this.SendPropertyChanging();
					this._EventData = value;
					this.SendPropertyChanged("EventData");
					this.OnEventDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Event_Subscription", Storage="_Event_Subscriptions", ThisKey="EventHash", OtherKey="Event")]
		public EntitySet<Event_Subscription> Event_Subscriptions
		{
			get
			{
				return this._Event_Subscriptions;
			}
			set
			{
				this._Event_Subscriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Event_Subscriptions(Event_Subscription entity)
		{
			this.SendPropertyChanging();
			entity.Event1 = this;
		}
		
		private void detach_Event_Subscriptions(Event_Subscription entity)
		{
			this.SendPropertyChanging();
			entity.Event1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subscription")]
	public partial class Subscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubscriptionHash;
		
		private System.Data.Linq.Binary _SubscriptionData;
		
		private EntitySet<Event_Subscription> _Event_Subscriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionHashChanging(int value);
    partial void OnSubscriptionHashChanged();
    partial void OnSubscriptionDataChanging(System.Data.Linq.Binary value);
    partial void OnSubscriptionDataChanged();
    #endregion
		
		public Subscription()
		{
			this._Event_Subscriptions = new EntitySet<Event_Subscription>(new Action<Event_Subscription>(this.attach_Event_Subscriptions), new Action<Event_Subscription>(this.detach_Event_Subscriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionHash", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubscriptionHash
		{
			get
			{
				return this._SubscriptionHash;
			}
			set
			{
				if ((this._SubscriptionHash != value))
				{
					this.OnSubscriptionHashChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionHash = value;
					this.SendPropertyChanged("SubscriptionHash");
					this.OnSubscriptionHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Subscription", Storage="_SubscriptionData", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SubscriptionData
		{
			get
			{
				return this._SubscriptionData;
			}
			set
			{
				if ((this._SubscriptionData != value))
				{
					this.OnSubscriptionDataChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionData = value;
					this.SendPropertyChanged("SubscriptionData");
					this.OnSubscriptionDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscription_Event_Subscription", Storage="_Event_Subscriptions", ThisKey="SubscriptionHash", OtherKey="Subscription")]
		public EntitySet<Event_Subscription> Event_Subscriptions
		{
			get
			{
				return this._Event_Subscriptions;
			}
			set
			{
				this._Event_Subscriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Event_Subscriptions(Event_Subscription entity)
		{
			this.SendPropertyChanging();
			entity.Subscription1 = this;
		}
		
		private void detach_Event_Subscriptions(Event_Subscription entity)
		{
			this.SendPropertyChanging();
			entity.Subscription1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event_Subscription")]
	public partial class Event_Subscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Event;
		
		private int _Subscription;
		
		private EntityRef<Event> _Event1;
		
		private EntityRef<Subscription> _Subscription1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventChanging(int value);
    partial void OnEventChanged();
    partial void OnSubscriptionChanging(int value);
    partial void OnSubscriptionChanged();
    #endregion
		
		public Event_Subscription()
		{
			this._Event1 = default(EntityRef<Event>);
			this._Subscription1 = default(EntityRef<Subscription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Event
		{
			get
			{
				return this._Event;
			}
			set
			{
				if ((this._Event != value))
				{
					if (this._Event1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventChanging(value);
					this.SendPropertyChanging();
					this._Event = value;
					this.SendPropertyChanged("Event");
					this.OnEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subscription", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Subscription
		{
			get
			{
				return this._Subscription;
			}
			set
			{
				if ((this._Subscription != value))
				{
					if (this._Subscription1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionChanging(value);
					this.SendPropertyChanging();
					this._Subscription = value;
					this.SendPropertyChanged("Subscription");
					this.OnSubscriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Event_Subscription", Storage="_Event1", ThisKey="Event", OtherKey="EventHash", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Event Event1
		{
			get
			{
				return this._Event1.Entity;
			}
			set
			{
				Event previousValue = this._Event1.Entity;
				if (((previousValue != value) 
							|| (this._Event1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event1.Entity = null;
						previousValue.Event_Subscriptions.Remove(this);
					}
					this._Event1.Entity = value;
					if ((value != null))
					{
						value.Event_Subscriptions.Add(this);
						this._Event = value.EventHash;
					}
					else
					{
						this._Event = default(int);
					}
					this.SendPropertyChanged("Event1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscription_Event_Subscription", Storage="_Subscription1", ThisKey="Subscription", OtherKey="SubscriptionHash", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Subscription Subscription1
		{
			get
			{
				return this._Subscription1.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription1.Entity;
				if (((previousValue != value) 
							|| (this._Subscription1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription1.Entity = null;
						previousValue.Event_Subscriptions.Remove(this);
					}
					this._Subscription1.Entity = value;
					if ((value != null))
					{
						value.Event_Subscriptions.Add(this);
						this._Subscription = value.SubscriptionHash;
					}
					else
					{
						this._Subscription = default(int);
					}
					this.SendPropertyChanged("Subscription1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
